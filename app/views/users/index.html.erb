<p id="notice"><%= notice %></p>

<div id="mothership" class="alert alert-danger" role="alert" hidden>Oops. We've lost connection to the mothership.
  Information on this page may be incorrect. Try reloading the page. If that doesn't solve the problem, call Dad.
</div>
<div id="info_messages" class="alert alert-danger" role="alert">
  <ul></ul>
</div>

<h1>Internet Access</h1>

<div>
  <video autoplay></video>
</div>

<table class="table table-striped table-responsive">
  <thead>
  <tr>
    <th>Name</th>
    <th>Time Range</th>
    <th>Minutes Remaining</th>
    <th>Status</th>
  </tr>
  </thead>

  <tbody>
  <% @users.each do |user| %>
      <tr data-user-id="<%= user.id %>">
        <td><%= user.name %></td>
        <td id='<%= "user#{user.id}-timerange" %>'><%= "#{user.wakeup} to #{user.bedtime}" %></td>
        <td id='<%= "user#{user.id}-countdown" %>'>calculating...</td>
        <td id='<%= "user#{user.id}-status-td" %>' class="user-status">
          <div id="disabled-note" hidden>Disabled</div>
          <input id='<%= "user#{user.id}-status" %>'
                   class='user-status'
                   <%= user.active ? 'checked' : '' %>
                   data-toggle="toggle"
                   data-userid='<%= user.id %>'
                 data-userrole='<%= user.role %>'
                   type="checkbox"></td>
      </tr>
  <% end %>
  </tbody>
</table>

<br>

<script>
  $(document).ready(function () {
    var videoEnabled = false;

    var startCamera = function (cb) {
      var videoElem = document.querySelector('video');
      var onError = function (err) {
        console.log('unable to access camera: ' + err.message);
        cb();
      }
      var initializeVideo = function (mediaStream) {
        videoElem.srcObject = mediaStream
        videoEnabled = true;
        cb();
      }
      navigator.mediaDevices.getUserMedia({video: {height: 240, width: 320}})
        .then(initializeVideo).catch(onError);
    }

    $('input.user-status').bootstrapToggle();

    var toggleWithoutEvent = function ($elem) {
      // switch the state of a slide toggle without triggering a change event
      $elem.prop('checked', !$elem.is(':checked'));
      $elem.parent().toggleClass('off');
      $elem.parent().toggleClass('btn-primary');
      $elem.parent().toggleClass('btn-default');
    }

    var toggleClicked = function (e) {
      e.stopPropagation();
      var $slideToggle = $(this).find('input')
      $slideToggle.bootstrapToggle('disable');
      var goActive = !$slideToggle.is(':checked');

      var doAjax = function () {
      $.ajax({
        context: this,
        type: 'POST', // Use POST with X-HTTP-Method-Override or a straight PUT if appropriate.
        dataType: 'json', // Set datatype - affects Accept header
          url: '/users/' + $slideToggle.attr('data-userid') + '.json', // A valid URL
        headers: {"X-HTTP-Method-Override": "PUT"}, // X-HTTP-Method-Override set to PUT.
          data: {user: {active: goActive, camera: videoEnabled}}, // Some data e.g. Valid JSON as a string
          success: function (data, textStatus, jqXHR) {
            var resp = JSON.parse(jqXHR.responseText)
            if (resp.error) {
              toastr.error('Unable to ' + (goActive ? 'enable' : 'disable') + ' internet.  ' + resp.error);
            } else {
              if (goActive) {
            toastr.success('Internet successfully enabled.');
          } else {
            toastr.info('Internet successfully disabled.');
          }
              toggleWithoutEvent($slideToggle)
            }
        },
          error: function (jqXHR) {
            var resp = JSON.parse(jqXHR.responseText)
            if (resp.error) {
              toastr.error('Unable to ' + (goActive ? 'enable' : 'disable') + ' internet.  ' + resp.error);
            } else {
              toastr.error('Unable to ' + (goActive ? 'enable' : 'disable') + ' internet.  ');
            }
        },
        complete: function () {
            $slideToggle.bootstrapToggle('enable');
        }
      });
      }

      if (goActive && $slideToggle.attr('data-userrole') !== '0' && !videoEnabled) {
        startCamera(doAjax);
      } else {
        doAjax();
      }
    }

    $('td.user-status').click(toggleClicked);

    var setToggleState = function ($toggleElem, newState) {
      // Update the state of a slide toggle without triggering a change event
      $toggleElem.prop('checked', newState);
      if (newState) {
        $toggleElem.parent().removeClass('off');
        $toggleElem.parent().addClass('btn-primary');
        $toggleElem.parent().removeClass('btn-default');
      } else {
        $toggleElem.parent().addClass('off');
        $toggleElem.parent().removeClass('btn-primary');
        $toggleElem.parent().addClass('btn-default');
      }
    };

    var fetchLatestUserInfo = function () {
      $.get('/info_messages.json', function (info_messages) {
        var $infoMessages = $('#info_messages');
        if (info_messages.length > 0) {
          $infoMessages.show();
          var $infoUl = $('<ul>');
          info_messages.forEach(function (info_message) {
            $infoUl.append($('<li>' + info_message.text + '</li>'));
          });
          $infoMessages.find('ul').replaceWith($infoUl);
        } else {
          $infoMessages.hide();
        }
      });

      $.get('/users.json', function (users) {
        $('#mothership').hide();
        users.forEach(function (user) {
          var $user = $('tr[data-user-id=' + user.id + ']');
          if (user.countdown > 0 && user.countdown < 60) {
            $user.find('#user' + user.id + '-countdown').text('less than one');
          } else {
            $user.find('#user' + user.id + '-countdown').text((user.countdown / 60).toFixed(0));
          }
          var $timeRange = $user.find('#user' + user.id + '-timerange');
          $timeRange.text(user.wakeup + ' to ' + user.bedtime);
          var $status = $user.find('#user' + user.id + '-status');
          setToggleState($status, user.active);
          $status.bootstrapToggle(user.countdown > 0 ? 'enable' : 'disable');
          var $statusTd = $user.find('#user' + user.id + '-status-td');
          if (user.disabled && !user.active) {
            $user.addClass('red-text');
            $statusTd.children('div.toggle').hide();
            $statusTd.children('div#disabled-note').show();
          } else {
            $user.removeClass('red-text');
            $statusTd.children('div.toggle').show();
            $statusTd.children('div#disabled-note').hide();
          }
        });
      }).fail(function () {
        $('#mothership').show();
      });
    };

    fetchLatestUserInfo();
    var USER_FETCH_INTERVAL = 10000;
    setInterval(fetchLatestUserInfo, USER_FETCH_INTERVAL);
  });
</script>